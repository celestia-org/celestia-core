version: 2.1

executors:
  golang:
    docker:
      - image: tendermintdev/docker-tendermint-build
    working_directory: /go/src/github.com/lazyledger/lazyledger-core
    environment:
      GOBIN: /tmp/bin
  release:
    machine: true
  docs:
    docker:
      - image: tendermintdev/docker-website-deployment
    environment:
      AWS_REGION: us-east-1

commands:
  run_test:
    parameters:
      script_path:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/bin
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: "Running test"
          command: |
            bash << parameters.script_path >>
jobs:
  setup_dependencies:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          command: |
            mkdir -p /tmp/bin
      - run:
          name: Cache go modules
          command: make go-mod-cache
      - run:
          name: tools
          command: make tools
      - run:
          name: "Build binaries"
          command: make install install_abci
      - save_cache:
          name: "Save go modules cache"
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          name: "Save source code cache"
          key: go-src-v1-{{ .Revision }}
          paths:
            - ".git"
      - persist_to_workspace:
          root: "/tmp/bin"
          paths:
            - "."

  test_persistence:
    executor: golang
    steps:
      - run_test:
          script_path: test/persist/test_failure_indices.sh

  test_cover:
    executor: golang
    parallelism: 4
    steps:
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - restore_cache:
          name: "Restore go module cache"
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: "Run tests"
          command: |
            export VERSION="$(git describe --tags --long | sed 's/v\(.*\)/\1/')"
            export GO111MODULE=on
            mkdir -p /tmp/logs /tmp/workspace/profiles
            for pkg in $(go list github.com/lazyledger/lazyledger-core/... | circleci tests split --split-by=timings); do
              id=$(basename "$pkg")
              go test -timeout 7m -mod=readonly -race -coverprofile=/tmp/workspace/profiles/$id.out -covermode=atomic "$pkg" | tee "/tmp/logs/$id-$RANDOM.log"
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "profiles/*"
      - store_artifacts:
          path: /tmp/logs

  test_p2p:
    environment:
      GOBIN: /home/circleci/.go_workspace/bin
      GOPATH: /home/circleci/.go_workspace
    machine:
      image: circleci/classic:latest
    parameters:
      ipv:
        type: integer
        default: 4
    steps:
      - checkout
      - run: mkdir -p $GOPATH/src/github.com/lazyledger
      - run: ln -sf /home/circleci/project $GOPATH/src/github.com/lazyledger/lazyledger-core
      - run: bash test/p2p/circleci.sh << parameters.ipv >>
      - store_artifacts:
          path: /home/circleci/project/test/p2p/logs

  prepare_build:
    executor: golang
    steps:
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - run:
          name: Get next release number
          command: |
            export LAST_TAG="`git describe --tags --abbrev=0 --match "${CIRCLE_BRANCH}.*"`"
            echo "Last tag: ${LAST_TAG}"
            if [ -z "${LAST_TAG}" ]; then
              export LAST_TAG="${CIRCLE_BRANCH}"
              echo "Last tag not found. Possibly fresh branch or feature branch. Setting ${LAST_TAG} as tag."
            fi
            export NEXT_TAG="`python -u scripts/release_management/bump-semver.py --version "${LAST_TAG}"`"
            echo "Next tag: ${NEXT_TAG}"
            echo "export CIRCLE_TAG=\"${NEXT_TAG}\"" > release-version.source
      - run:
          name: Build dependencies
          command: make tools
      - persist_to_workspace:
          root: .
          paths:
            - "release-version.source"
      - save_cache:
          key: v2-release-deps-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  build_artifacts:
    executor: golang
    parallelism: 5
    steps:
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - restore_cache:
          name: "Restore release dependencies cache"
          keys:
            - v2-release-deps-{{ checksum "go.sum" }}
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build artifact
          command: |
            # Setting CIRCLE_TAG because we do not tag the release ourselves.
            source /tmp/workspace/release-version.source
            if test ${CIRCLE_NODE_INDEX:-0} == 0 ;then export GOOS=linux GOARCH=amd64   && export OUTPUT=build/lazyledger-core_${GOOS}_${GOARCH} && make build && python -u scripts/release_management/zip-file.py ;fi
            if test ${CIRCLE_NODE_INDEX:-0} == 1 ;then export GOOS=darwin GOARCH=amd64  && export OUTPUT=build/lazyledger-core_${GOOS}_${GOARCH} && make build && python -u scripts/release_management/zip-file.py ;fi
            if test ${CIRCLE_NODE_INDEX:-0} == 2 ;then export GOOS=windows GOARCH=amd64 && export OUTPUT=build/lazyledger-core_${GOOS}_${GOARCH} && make build && python -u scripts/release_management/zip-file.py ;fi
            if test ${CIRCLE_NODE_INDEX:-0} == 3 ;then export GOOS=linux GOARCH=arm     && export OUTPUT=build/lazyledger-core_${GOOS}_${GOARCH} && make build && python -u scripts/release_management/zip-file.py ;fi
            if test ${CIRCLE_NODE_INDEX:-0} == 4 ;then export GOOS=linux GOARCH=arm64   && export OUTPUT=build/lazyledger-core_${GOOS}_${GOARCH} && make build && python -u scripts/release_management/zip-file.py ;fi
      - persist_to_workspace:
          root: build
          paths:
            - "*.zip"
            - "lazyledger-core_linux_amd64"

  release_artifacts:
    executor: golang
    steps:
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Deploy to GitHub"
          command: |
            # Setting CIRCLE_TAG because we do not tag the release ourselves.
            source /tmp/workspace/release-version.source
            echo "---"
            ls -la /tmp/workspace/*.zip
            echo "---"
            python -u scripts/release_management/sha-files.py
            echo "---"
            cat /tmp/workspace/SHA256SUMS
            echo "---"
            export RELEASE_ID="`python -u scripts/release_management/github-draft.py`"
            echo "Release ID: ${RELEASE_ID}"
            #Todo: Parallelize uploads
            export GOOS=linux GOARCH=amd64   && python -u scripts/release_management/github-upload.py --id "${RELEASE_ID}"
            export GOOS=darwin GOARCH=amd64  && python -u scripts/release_management/github-upload.py --id "${RELEASE_ID}"
            export GOOS=windows GOARCH=amd64 && python -u scripts/release_management/github-upload.py --id "${RELEASE_ID}"
            export GOOS=linux GOARCH=arm     && python -u scripts/release_management/github-upload.py --id "${RELEASE_ID}"
            export GOOS=linux GOARCH=arm64   && python -u scripts/release_management/github-upload.py --id "${RELEASE_ID}"
            python -u scripts/release_management/github-upload.py --file "/tmp/workspace/SHA256SUMS" --id "${RELEASE_ID}"
            python -u scripts/release_management/github-publish.py --id "${RELEASE_ID}"

workflows:
  version: 2
  test-suite:
    jobs:
      - setup_dependencies
      - test_persistence:
          requires:
            - setup_dependencies
      - test_p2p
      - test_p2p:
          name: test_p2p_ipv6
          ipv: 6
      # - contract_tests:
      #     requires:
      #       - setup_dependencies

  release:
    jobs:
      - prepare_build
      - build_artifacts:
          requires:
            - prepare_build
      - release_artifacts:
          requires:
            - prepare_build
            - build_artifacts
          filters:
            branches:
              only:
                - /v[0-9]+\.[0-9]+/
